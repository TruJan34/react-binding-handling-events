React elements are immutable. Once you create an element, you can’t change its children or attributes.
the only way to update the UI is to create a new element, and pass it to ReactDOM.render().

 an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created
 
 
Props are Read-Only : 

function sum(a, b) {
  return a + b;
}

Such functions are called “pure” because they do not attempt to change their inputs,
and always return the same result for the same inputs

All React components must act like pure functions with respect to their props.

State allows React components to change their output over time in response to user actions, network responses, 
and anything else, without violating this rule.


---------		state and lifecycle in a React component  	---------

State is similar to props, but it is private and fully controlled by the component.
Local state is a feature available only to classes.

The render method will be called each time an update happens,
but as long as we render <Clock /> into the same DOM node, 
only a single instance of the Clock class will be used. 
This lets us use additional features such as local state and lifecycle methods.

While this.props is set up by React itself and this.state has a special meaning,
you are free to add additional fields to the class manually
if you need to store something that doesn’t participate in the data flow (like a timer ID).

The only place where you can assign this.state is the constructor.
Do Not Modify State Directly -> cause that will not re-render a component

State Updates May Be Asynchronous : 
React may batch multiple setState() calls into a single update for performance.
 you should not rely on their values for calculating the next state.
 
To fix it, use a second form of setState() that accepts a function rather than an object. 
That function will receive the previous state as the first argument, 
and the props at the time the update is applied as the second argument:

// Correct
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));


State Updates are Merged :
When you call setState(), React merges the object you provide into the current state.
ex: he merging is shallow, so this.setState({comments}) leaves this.state.posts intact, 
	but completely replaces this.state.comments.
	
	
The Data Flows Down :
Neither parent nor child components can know if a certain component is stateful or stateless,
and they shouldn’t care whether it is defined as a function or a class.

This is why state is often called local or encapsulated. 
It is not accessible to any component other than the one that owns and sets it.


1. The componentDidMount() method runs after the component output has been rendered to the DOM.



Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences:
1 React events are named using camelCase, rather than lowercase.
2 With JSX you pass a function as the event handler, rather than a string.

e.preventDefault();

e is a synthetic event.

When using React you should generally not need to call addEventListener to add listeners to a DOM element
 after it is created. Instead, just provide a listener when the element is initially rendered.
 
 methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, 
 this will be undefined when the function is actually called.
 
 if you refer to a method without () after it, such as onClick={this.handleClick},
 you should bind that method.

 
 To avoid bind two ways ->
 
  this.handleClick = this.handleClick.bind(this);  // in constructor
  
  handleClick() {
      this.setState(state => ({
        isToggleOn: !state.isToggleOn
      }));
    }
	
	Way 1
class fields syntax ->	can be written as below, no need to bind (This syntax ensures `this` is bound within handleClick.)
	
	handleClick = () => {
      this.setState(state => ({
        isToggleOn: !state.isToggleOn
      }));
    }
	
	
	Way 2 
you can use an arrow function in the callback:
	handleClick() {
        this.setState(state => ({
        isToggleOn: !state.isToggleOn
        }));
    }
	
	<button onClick={(e) => this.handleClick(e)}>  // in return
	
//	The problem with this syntax is that a
 different callback is created each time the LoggingButton renders. 
 In most cases, this is fine. However, if this callback is passed as a prop to lower components, 
 those components might do an extra re-rendering. 
 
 so use Way 1
 
 
 
 Passing Arguments to Event Handlers:->
 ex:
 <button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

In both cases, the e argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with bind any further arguments are automatically forwarded.
	